
models (1)
py
routes (1)
py
main
py
app (1)
py
add_sample_activities
py
N
I'm having trouble resolving issues with the bulk_add_activities function in routes.py and the Activity model. Could you please provide guidance on how to correctly handle the latitude and longitude fields in both the model and the function? Here are the specific issues I'm facing:
1. The Activity constructor is throwing an error saying 'latitude' is an invalid keyword argument.
2. The bulk_add_activities function is not successfully creating new Activity instances with latitude and longitude data.
Could you review the Activity model in models.py and the bulk_add_activities function in routes.py, and suggest the correct way to implement this functionality?

I've reviewed the code and I can see the issues you're facing. Let's address them one by one:

The Activity constructor error: This error is likely occurring because the latitude and longitude fields are not properly defined in your Activity model. Let's update the model in models.py:
python

Copy
class Activity(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    date = db.Column(db.Date, nullable=False)
    start_time = db.Column(db.Time, nullable=False)
    end_time = db.Column(db.Time, nullable=False)
    title = db.Column(db.String(100), nullable=False)
    location = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=True)
    category = db.Column(db.String(50), nullable=False)
    price = db.Column(db.Float, nullable=False, default=0.0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    latitude = db.Column(db.Float, nullable=True)
    longitude = db.Column(db.Float, nullable=True)

    def __init__(self, **kwargs):
        super(Activity, self).__init__(**kwargs)

    # ... rest of the class remains the same
The bulk_add_activities function: Let's update the bulk_add_activities function in routes.py to correctly handle the latitude and longitude fields:
python

Copy
@app.route('/bulk_add_activities', methods=['POST'])
def bulk_add_activities():
    activities_data = request.json.get('activities', [])
    added_activities = []
    for activity_data in activities_data:
        date = datetime.strptime(activity_data['date'], '%m/%d/%Y').date()
        start_time = datetime.strptime(activity_data['start_time'], '%I:%M %p').time()
        end_time = datetime.strptime(activity_data['end_time'], '%I:%M %p').time()
        new_activity = Activity(
            date=date,
            start_time=start_time,
            end_time=end_time,
            title=activity_data['title'],
            location=activity_data['location'],
            description=activity_data['description'],
            category=activity_data['category'],
            price=float(activity_data['price']),
            latitude=float(activity_data.get('latitude')) if activity_data.get('latitude') is not None else None,
            longitude=float(activity_data.get('longitude')) if activity_data.get('longitude') is not None else None
        )
        db.session.add(new_activity)
        added_activities.append(new_activity)
    db.session.commit()
    print(f"Added {len(added_activities)} activities to the database")
    return jsonify({'message': f'Successfully added {len(added_activities)} activities'}), 201
The main changes are:

In the Activity model, we've added an __init__ method that uses super() to properly initialize the model instance with keyword arguments.
In the bulk_add_activities function, we've updated how we handle latitude and longitude:
We use activity_data.get('latitude') instead of activity_data['latitude'] to avoid KeyError if the key doesn't exist.
We check if the value is not None before trying to convert it to float, and set it to None if it doesn't exist or is None.
These changes should resolve the issues you're facing. After making these changes:

Make sure to restart your Flask application to apply the changes to the Activity model.
Run your add_sample_activities.py script again to test the bulk add functionality.